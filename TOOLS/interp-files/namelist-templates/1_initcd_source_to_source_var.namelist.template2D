!! -------------------
!! Namelist for SOSIE
!! -------------------
!!
!!
!! ************************************************************
!! &ndom_src => info about field to interpolate
!!            and source grid to interpolate from
!! ************************************************************
!!
!! csource  : short string to describe the origin grid         [char]
!!
!! ivect : vector correction control on treated field [integer]
!!         ivect = 0 : input field is not a component of a vector
!!         or the target grid is regular (l_reg_trg = T)
!!         * if non-regular distorted target grids (like ORCAX):
!!         ivect = 1 : input field is a zonal (X) component of a vector
!!         ivect = 2 : input field is a meridional (Y) component of a vector
!!
!! l_reg_src : is the source grid regular? [logical]
!!            (ie : are input longitude and latitude 1D?)
!!
!! cf_src  : file containing the input field to be interpolated [char]
!! cv_src  : name of treated variable (in input field file) [char]
!!
!! cv_t_src : name of time record variable in the input file [char]
!!            or 'missing_rec' if no time record is present in the input file
!!
!! cf_x_src   : file containing the input grid (usually = cf_src) [char]
!! cv_lon_src : name of longitude in the input grid file [char]
!! cv_lat_src : name of latitude in the input grid file [char]
!!
!! cf_lsm_src : (only relevant if idrown==.true.)
!!              file containing the input land-sea mask [char]
!!              Alternatively:
!!              * specify " cf_lsm_src = 'missing_value' " if a 'missing_value' netcdf
!!                attribute defines the mask on the input data field
!!              * specify " cf_lsm_src = 'nan' " if mask is defined with NaN values
!!              * specify " cf_lsm_src = 'value' if you want land regions to be defined
!!                where field 'cv_src' is strictly equal to the numeric value read into 'cv_lsm_src'
!!              * specify " cf_lsm_src = 'val+' if you want land regions to be defined
!!                where field 'cv_src' is larger or equal to the numeric value read into 'cv_lsm_src'
!!              * specify " cf_lsm_src = 'val-' if you want land regions to be defined
!!                where field 'cv_src' is smaller or equal to the numeric value read into 'cv_lsm_src'
!!                Ex: you want all points where your field is <= 0 to become land mask,
!!                    then specify: cf_lsm_src = 'val-' and cv_lsm_src = '0.00001'
!!
!! cv_lsm_src : (only relevant if idrown==.true.)
!!              name of land-sea mask variable [char]
!!              or if cf_lsm_src = 'missing_value'--> '')
!!              by default ocean is flagged with value 1
!!              and continents are flagged with value 0
!!              Alternatively:
!!              a string of numeric value when cf_lsm_src is 'value', 'val-', or 'val+'
!!
!! ewper_src : east-west periodicity on the input file/grid [integer]
!!             = -1 --> no periodicity
!!             >= 0 --> periodicity with overlap of ewper points
!!
!!--------------------------------------------------------------------------
!!
!! cf_z_src  : file containing the input depth vector (associates a depth to a
!!             given level). In most cases should be the same file than cf_x_src.
!!
!! cv_z_src  : name of the variable for the input depth vector
!!
!! ctype_z_src : type of coordinates in input file (currently available z/sigma)
!!
!! These are to be set ONLY if ctype_z_src = 'sigma'
!! cf_bathy_src : file containing the bathymetry on input grid (usually ROMS grid file)
!! cv_bathy_src : name of bathymetry variable (usually h)
!! ssig_src     : structure with ROMS s-coordinates parameters on input grid
!! Vtransform | Vstretching | Nlevels | theta_s | theta_b | Tcline | hmin
!!
&ndom_src
csource   = '__SOURCEID__'
ivect     = 0
l_reg_src = T
cf_src    = '__SFILE__'
cv_src    = '__VAR__'
cv_t_src  = '__STIMEVAR__'
cf_x_src  = '__SFILE__'
cv_lon_src= '__SLONVAR__'
cv_lat_src= '__SLATVAR__'
cf_lsm_src= '__SOURCEID___mask.nc'
cv_lsm_src= 'mask'
ewper_src = -1
/
!!
!!
!!
!!
!!
!! *****************************************************************
!! &ndom_trg => info about horizontal target grid to interpolate to
!! *****************************************************************
!!
!! ctarget  : short string to describe the target grid         [char]
!!
!! l_reg_trg : is the target grid regular ? [logical]
!!             (ie : are output longitude and latitude 1D?)
!!
!! cf_x_trg   : file containing the target grid [char]
!! cv_lon_trg : name of longitude variable [char]
!! cv_lat_trg : name of latitude variable [char]
!!
!! TRICK:  for interpolating onto a global regular spherical grid
!! ------  with a resolution of dx deg. of longitude and dy deg. of latitude
!!         * cf_x_trg   = 'spheric' ! tells SOSIE to build a spherical output grid
!!         * cv_lon_trg = '1.0'  ! your dx, here 1.0 deg.
!!         * cv_lat_trg = '1.0'  ! your dy, here 1.0 deg.
!!
!!
!! cf_lsm_trg : file containing output land-sea mask [char]
!!              MUST BE 3D for 3D interpolation!
!!              or specify 'missing_value' if a 'missing_value' netcdf
!!              attribute defines the mask on a field 'X' in file 'cf_x_trg'
!!              (not needed if "lmout = .FALSE." --> '')
!!
!! cv_lsm_trg : name of land-sea mask variable in 'cf_lsm_trg'     [char]
!!              or name of field 'X' in 'cf_x_trg' if you specified
!!              cf_lsm_trg = 'missing_value'
!!              (not needed if "lmout = .FALSE." --> '')
!!
!! ewper_trg : east-west periodicity on the output file/grid [integer]
!!             = -1 --> no periodicity
!!             >= 0 --> periodicity with overlap of ewper points
!!
!! cf_z_trg : file containing the output depth vector (associates a depth to a
!!            given level). In most cases should be the same file than cf_x_src.
!!
!! cv_z_trg: name you wish to give to depth variable in file to be created...
!!
!! ctype_z_trg : type of coordinates in output file (currently available z/sigma)
!!
!! These are to be set ONLY if ctype_z_trg = 'sigma'
!! cf_bathy_trg : file containing the bathymetry on output grid (usually ROMS grid file)
!! cv_bathy_trg : name of bathymetry variable (usually h)
!! ssig_trg     : structure with ROMS s-coordinates parameters on output grid (see above)
!!
&ndom_trg
ctarget    = '__SOURCEID__'
l_reg_trg  = T
cf_x_trg   = '__SFILE__'
cv_lon_trg = '__SLONVAR__'
cv_lat_trg = '__SLATVAR__'
cf_lsm_trg = ''
cv_lsm_trg = ''
ewper_trg  = -1
/
!!
!!
!!
!!
!! *****************************************************************
!! &ninterp => info on the interpolation method to use
!! *****************************************************************
!!
!! This deals with the details of the interpolation 
!!
!! cmethod  : the 2D interpolation method to be used
!!
!!            * use 'akima' if your input domain is regular (non-distorted grid)
!!
!!            * use 'bilin' otherwise (bilinear 2D interpolation)
!!
!!            * use 'no_xy' to only perform vertical interpolation, i.e. interpolate a
!!              a 3D field given on ni*nj and nk_src levels to the same ni*nj 2D domain
!!              but on nk_out levels!
!!              => for example interpolates a 3D field from grid ORCAX.L46 to ORCAX.L75
!!
!! idrown : whether we call DROWN land filling procedure
!!          => will propagate/extrapolate sea values (defined where lsm==1)
!!          of field cv_in ONTO continents (defined WHERE lsm==0) to avoid
!!          interpolation problems, such as continental values that contaminate
!!          sea values during interpolation. It contains three parameters:
!!
!!          * np_penetr : number of pixels to propagate sea-values onto land
!!                        will activate DROW if >0
!!          * nt_smooth : how many times to smooth the area
!!          * l_msk_chg : mask changes with time
!!
!! l_save_drwn : whether to save drowned input field
!!
!! ismooth : if ismooth > 0 the field to be interpolated will be smoothed
!!           prior to interpolation. By applying ismooth times a type of
!!           closest neighboors boxcar smoothing algorithm
!!           (check "SMOOTH" of mod_drown.f90)
!!         => this is usefull to avoid sub-sampling when your target
!!            grid is much coarser than your source grid
!!            (i.e. when interpolating from high-res to low-res)
!!         => start with a multiple of 10, typically 20, and adjust depending
!!            on the result
!!               
!! jt1     : first time record to be interpolated
!! jt2     : last  time record to be interpolated
!!           => set jt1 and jt2 to 0 if you want to skip this option
!!              and interpolate the nt time steps of the current field
!!
!! jplev : level to treat if your file is 3D (spatial), has no influence if
!!         your file is 2D in space !
!!       ------------------------------------------------------------------
!!        jplev > 0 = level to treat (ex : jplev = 1 will interpolate only
!!                    surface field corresponding to the 1st level )
!!       ------------------------------------------------------------------
!!        jplev = 0 : perform 3D interpolation (if input file is 3D) !!! |
!!       ------------------------------------------------------------------
!!        jplev = -1 : overrides good sense and forces sosie to understand that
!!                     your field to interpolate is 2D with a time record
!!                     (usually the case if the time record dimension in your
!!                      input file is not declared as UNLIMITED => bad! )
!!                     => so SOSIE doesn't mistake this time record with a depth!
!!       -------------------------------------------------------------------
!!
!! vmax : upper bound not to exceed for treated variable [real]
!! vmin : lower bound not to exceed for treated variable [real]
!!
!! ismooth_out : post-interpolation smoothing, working as ismooth
!!
!! ibx_xtra_sm : box for exta-smoothing => (/ntimes, i1,j1, i2,j2/)
!!
&ninterp
cmethod  = 'bilin'
idrown   = 300,0,.false.
l_save_drwn = .true.
ismooth   = 0
jt1       = 0
jt2       = 0
jplev     = 1
vmax      =  1.E6
vmin      = -1.E6
ismooth_out = 0
ibx_xtra_sm = 0,0,0,0,0
/
!!
!!
!!
!!
!! *****************************************************************
!! &noutput => info on the (horizontal) interpolation method to use
!!             and the netcdf file to generate
!! *****************************************************************
!!
!! This mostly deals with how the output file to be created is going to look like!
!!
!! *** Into the netcdf file to be created : ***
!! cv_t_out : name of time record vector in the output file [char]
!!            => set to cv_t_out='' if no time dimension
!! cv_out   : name for treated variable in the output file                [char]
!! cu_out   : if not = '': then change the unit of treated variable units [char]
!! cln_out  : if not = '': then change the long name treated variable     [char]
!! cd_out   : directory to create output file to                          [char]
!!
!! cextra   : short extra indication about the output file                [char]
!!
!! lmout : whether to mask the interpolated field on the output file      [logical]
!!         if lmout is set to .FALSE. and cf_lsm_out is different than '' the output
!!         field will be drowned using the mask defined by cf_lsm_out (and cv_lsm_out)
!!
!! rmiss_val : value for masked points in output file (used with lmout)   [real]
!!
!! lct   : whether to control or not time variable                        [logical]
!!         TRUE -> specify time array with starting time 't0' and step 't_stp'
!!                 usefull if you do not have a "time" variable in your input netcdf file !
!!         FALSE -> same time array as in input file is used
!!
!! t0    : time to start (if lct is set to .TRUE.)                        [real]
!! t_stp : time step (if lct is set to .TRUE.)                            [real]
!!
!! cv_z_out : name of the variable for the output depth vector in file 'cf_z_trg'
!!
&noutput
cv_t_out = 'time'
cv_out   = '__VAR__'
cu_out   = ''
cln_out  = '__VARL__'
cd_out   = '.'
cextra   = '__TAG__'
lmout    = F
!rmiss_val= -999
lct      = F
t0       = 0.
t_stp    = 0.
/
!!
